 def compute_probabilities(X, theta, temp_parameter):
     """
     Computes, for each datapoint X[i], the probability that X[i] is labeled as j
     for j = 0, 1, ..., k-1
     Args:
         X - (n, d) NumPy array (n datapoints each with d features)
         theta - (k, d) NumPy array, where row j represents the parameters of our model for label j
         temp_parameter - the temperature parameter of softmax function (scalar)
     Returns:
         H - (k, n) NumPy array, where each entry H[j][i] is the probability that X[i] is labeled as j
     """
     itemp = 1 / temp_parameter
     dot_products = itemp * theta.dot(X.T)
     max_of_columns = dot_products.max(axis=0)
     shifted_dot_products = dot_products - max_of_columns
     exponentiated = np.exp(shifted_dot_products)
     col_sums = exponentiated.sum(axis=0)
     return exponentiated / col_sums
